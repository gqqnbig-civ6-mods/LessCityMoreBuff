import sys

requirementSetIdDict = {}


def writeRequirements(eraIndex):
	"""

	:param eraIndex:
	:return:  requirementSetId and sql. SQL may be None if there is no need to generate it.
	"""

	assert eraIndex > 0, 'Conditions for Ancient era should be optimized out.'

	if eraIndex in requirementSetIdDict:
		return requirementSetIdDict[eraIndex], None

	era = ERAS[eraIndex]
	sql = []
	requirementId = f'REQUIRES_PLAYER_IS_{era}_ERA'
	sql.append(f'''
INSERT INTO Requirements(RequirementId, RequirementType)
SELECT '{requirementId}', 'REQUIREMENT_PLAYER_ERA_AT_LEAST'
WHERE NOT EXISTS(SELECT 1 FROM Requirements WHERE RequirementId = '{requirementId}')
''')

	sql.append(f'''
INSERT INTO RequirementArguments(RequirementId, Name, Value)
SELECT '{requirementId}', 'EraType', 'ERA_{era}'
WHERE NOT EXISTS(SELECT 1 FROM RequirementArguments WHERE RequirementId = '{requirementId}')
''')

	requirementSetId = f'PLAYER_IS_{era}_ERA'
	sql.append(f'''
INSERT INTO RequirementSets(RequirementSetId, RequirementSetType)
VALUES ('{requirementSetId}', 'REQUIREMENTSET_TEST_ALL')
''')

	sql.append(f'''
INSERT INTO RequirementSetRequirements
VALUES ('{requirementSetId}', '{requirementId}')
''')

	requirementSetIdDict[eraIndex] = requirementSetId
	return requirementSetId, ';\n'.join(sql)


def writeModifier(yieldType, eraIndex, cityCount, bonusPerEra):
	"""

	:param yieldType:
	:param eraIndex:
	:param cityCount:
	:param bonusPerEra: bonus to yield type by percentage.
	:return:  modifierId, sql
	"""
	isReverse = cityCount > 1

	sql = []
	if eraIndex > 0:
		subjectRequirementSetId, requirementSql = writeRequirements(eraIndex)
		if requirementSql:
			sql.append(requirementSql)
		subjectRequirementSetId = f"'{subjectRequirementSetId}'"
	else:
		subjectRequirementSetId = 'NULL'

	modifierId = f"CITY{cityCount}_BOOST_{yieldType}_SCALING{'_REVERSE' if isReverse else ''}_ERA_{ERAS[eraIndex]}"

	sql.append(f'''
INSERT INTO Modifiers(ModifierId, ModifierType, SubjectRequirementSetId)
VALUES ('{modifierId}', 'MODIFIER_PLAYER_CITIES_ADJUST_CITY_YIELD_MODIFIER', {subjectRequirementSetId})
''')

	sql.append(f'''
INSERT INTO ModifierArguments(ModifierId, Name, Value)
VALUES ('{modifierId}', 'Amount', {-bonusPerEra / (MAX_CITY_COUNT - 1) if isReverse else bonusPerEra}),
       ('{modifierId}', 'YieldType', 'YIELD_{yieldType}')
''')

	return modifierId, ';\n'.join(sql)


def writeTechnologyModifiers(cityCount):
	sql = []
	technologyType = f'TECH_CITY{cityCount}'

	# Each placeholder technology applies to 'CULTURE' and 'SCIENCE',
	# and for each era, the bonus is different.
	for yiledType in ['CULTURE', 'SCIENCE']:
		for eraIndex in range(len(ERAS)):
			modifierId, modifierSql = writeModifier(yiledType, eraIndex, cityCount, 30)
			sql.append(modifierSql)
			sql.append(f'''
INSERT INTO TechnologyModifiers(TechnologyType, ModifierId)
VALUES ('{technologyType}', '{modifierId}')''')

	return technologyType, ';\n'.join(sql)


ERAS = ['ANCIENT', 'CLASSICAL', 'MEDIEVAL', 'RENAISSANCE', 'INDUSTRIAL', 'MODERN', 'ATOMIC', 'INFORMATION']
MAX_CITY_COUNT = 4

if __name__ == '__main__':
	cityRange = range(MAX_CITY_COUNT)

	sql = [writeTechnologyModifiers(cityCount + 1)[1] for cityCount in cityRange]

	content = ';\n'.join(sql) + ';'
	with open('../Modifiers_Gameplay.sql', 'w') as f:
		f.write('-- This file is auto-generated by GenerateSQL.py\n\n')
		f.write(content)

# if '--DebugGameplay' in sys.argv:
# 	index = sys.argv.index('DebugGameplay')
# 	dbPath = sys.argv[index + 1]
#
# 	import sqlite3
#
# 	conn = sqlite3.connect(dbPath)
# 	conn.executescript(content)
